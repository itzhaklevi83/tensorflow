""" create a mashin learning to recognize face expression and save it
train the mashin and fix problems
print results"""

import os
import cv2
import numpy as np
import dlib
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV
import pickle
import time

def load_image(path):
    return cv2.cvtColor(cv2.imread(path), cv2.COLOR_BGR2GRAY)

def reshape_data(input_data):
    nsamples, nx, ny = input_data.shape
    return input_data.reshape((nsamples, nx*ny))

def train_model():
    start_time = time.time()
    basedir = "./"
    image_dir = os.path.join(basedir, "images")
    training_data = []
    training_labels = []
    prediction_data = []
    prediction_labels = []
    dirs = os.listdir(image_dir)
    print(dirs)
    for i in range(len(dirs)):
        path = image_dir + "/" + dirs[i]
        img = load_image(path)
        print(path)
        img = cv2.resize(img, (64, 64))
        print(img.shape)
        training_data.append(img)
        training_labels.append(i)
    # training_data = reshape_data(np.array(training_data))
    # clf = SVC(kernel='linear', probability=True)
    # clf.fit(training_data, training_labels)
    # with open('svc_linear_face.pkl', 'wb') as f:
    #     pickle.dump(clf, f)
    # end_time = time.time()
    # print("SVC Linear model trained and saved in", end_time - start_time)
    #
    # start_time = time.time()
    # clf = SVC(kernel='rbf', probability=True)
    # clf.fit(training_data, training_labels)
    # end_time = time.time()
    # print("SVC RBF model trained and saved in", end_time - start_time)
    #
    # start_time = time.time()
    # clf = SVC(kernel='poly', probability=True)
    # clf.fit(training_data, training_labels)
    # end_time = time.time()
    # print("SVC Poly model trained and saved in", end_time - start_time)
    #
    # start_time = time.time()
    # clf = SVC(kernel='sigmoid', probability=True)
    # clf.fit(training_data, training_labels)
    # end_time = time.time()
    # print("SVC Sigmoid model trained and saved in", end_time - start_time)
    #
    # start_time = time.time()
    # clf = SVC(kernel='precomputed', probability=True)
    # clf.fit(training_data, training_labels)
    # end_time = time.time()
    # print("SVC Precomputed model trained and saved in", end_time - start_time)

    # start_time = time.time()
    # clf = SVC(kernel='linear', probability=True)
    # parameters = {'C': [1, 10, 100, 1000], 'gamma': [0.001, 0.0001]}
    # clf = GridSearchCV(clf, parameters)
    # clf.fit(training_data, training_labels)
    # end_time = time.time()
    # print("SVC Linear model trained and saved in", end_time - start_time)
    # print(clf.best_params_)

    start_time = time.time()
    clf = SVC(kernel='rbf', probability=True)
    parameters = {'C': [1, 10, 100, 1000], 'gamma': [0.001, 0.0001]}
    clf = GridSearchCV(clf, parameters)
    clf.fit(training_data, training_labels)
    end_time = time.time()
    print("SVC RBF model trained and saved in", end_time - start_time)
    print(clf.best_params_)

    start_time = time.time()
    clf = SVC(kernel='poly', probability=True)
    parameters = {'C': [1, 10, 100, 1000], 'gamma': [0.001, 0.0001]}
    clf = GridSearchCV(clf, parameters)
    clf.fit(training_data, training_labels)
    end_time = time.time()
    print("SVC Poly model trained and saved in", end_time - start_time)
    print(clf.best_params_)

    start_time = time.time()
    clf = SVC(kernel='sigmoid', probability=True)
    parameters = {'C': [1, 10, 100, 1000], 'gamma': [0.001, 0.0001]}
    clf = GridSearchCV(clf, parameters)
    clf.fit(training_data, training_labels)
    end_time = time.time()
    print("SVC Sigmoid model trained and saved in", end_time - start_time)
    print(clf.best_params_)

    start_time = time.time()
    clf = SVC(kernel='precomputed', probability=True)
    parameters = {'C': [1, 10, 100, 1000], 'gamma': [0.001, 0.0001]}
    clf = GridSearchCV(clf, parameters)
    clf.fit(training_data, training_labels)
    end_time = time.time()
    print("SVC Precomputed model trained and saved in", end_time - start_time)
    print(clf.best_params_)


def predict_image(clf, img):
    img = cv2.resize(img, (64, 64))
    img = np.reshape(img, [1, 64*64])
    prob = clf.predict_proba(img)
    prob_list = prob[0].tolist()
    max_prob = max(prob_list)
    max_prob_index = prob_list.index(max_prob)
    return max_prob_index, max_prob

def predict_images(clf):
    start_time = time.time()
    basedir = "./"
    image_dir = os.path.join(basedir, "images")
    dirs = os.listdir(image_dir)
    print(dirs)
    for i in range(len(dirs)):
        path = image_dir + "/" + dirs[i]
        img = load_image(path)
        print(path)
        img = cv2.resize(img, (64, 64))
        print(img.shape)
        pred_index, prob = predict_image(clf, img)
        print(dirs[i], dirs[pred_index])
    end_time = time.time()
    print("Prediction done in", end_time - start_time)

def main():
    train_model()
    with open('svc_linear_face.pkl', 'rb') as f:
        clf = pickle.load(f)
    predict_images(clf)

if __name__ == "__main__":
    main()
